// Generated by CoffeeScript 1.12.7
(function() {
  var AI, Bird, Game, Pipes, Runner, Score, ScoreBoard, Stage, bird_center_x, bird_height, bird_left_x, bird_width, pipes_height, pipes_width, state_ground;

  bird_width = 43;

  bird_height = 15;

  bird_left_x = 99;

  bird_center_x = bird_left_x + bird_width / 2;

  pipes_width = 69;

  pipes_height = 128;

  state_ground = 418;

  jQuery.fn.shake = function(intShakes, intDistance, intDuration) {
    this.each(function() {
      var x;
      $(this).css("position", "relative");
      x = 1;
      while (x <= intShakes) {
        $(this).animate({
          left: intDistance * -1
        }, (intDuration / intShakes) / 4).animate({
          left: intDistance
        }, (intDuration / intShakes) / 2).animate({
          left: 0
        }, (intDuration / intShakes) / 4);
        x++;
      }
    });
    return this;
  };

  Runner = (function() {
    function Runner() {
      this.FPS = 30;
      this.BOOST_UP = 5.0;
      this.set_speed();
      this.GROUND_SPEED_PER_SEC = 190;
      this.GROUND_SPEED = this.GROUND_SPEED_PER_SEC / this.FPS;
      this.GRAVITY_PER_SEC = 35;
      this.GRAVITY = this.GRAVITY_PER_SEC / (this.FPS * this.FPS / 60);
      this.BIRD_JUMP_SPEED_PER_SEC = 510;
      this.BIRD_JUMP_SPEED = this.BIRD_JUMP_SPEED_PER_SEC / this.FPS;
      this.roles = [];
    }

    Runner.prototype.set_speed = function() {
      return this.FRAME_TIME = 1000 / this.BOOST_UP / this.FPS;
    };

    Runner.prototype.add = function(role) {
      this.roles.push(role);
      return role.runner = this;
    };

    Runner.prototype.run = function() {
      var start_time;
      start_time = new Date().getTime();
      return setInterval((function(_this) {
        return function() {
          var deltat, j, len, new_time, ref, role;
          new_time = new Date().getTime();
          deltat = new_time - start_time;
          if (deltat > _this.FRAME_TIME) {
            ref = _this.roles;
            for (j = 0, len = ref.length; j < len; j++) {
              role = ref[j];
              role.draw();
            }
            return start_time = new_time;
          }
        };
      })(this), 1);
    };

    return Runner;

  })();

  window.AI_ON = 1;

  AI = (function() {
    function AI() {
      if (!window.AI_ON) {
        return;
      }
      this.pipes = window.game.pipes.pipes;
      this.bird = window.game.bird;
      console.log("AI Enabled");
      window.game.runner.add(this);
    }

    AI.prototype.draw = function() {
      var fnly, g, i, j, min, p, ref, spd, t;
      if (this.bird.is_dead) {
        return;
      }
      if (this.pipes.length > 0) {
        p = this.pipes[0];
        i = 0;
        if (bird_left_x > p.data('left') + pipes_width && this.pipes.length > 1) {
          p = this.pipes[1];
          i = 1;
        }
        t = Math.floor(p.data('left') - (this.bird.left + bird_width) + 0.5);
        if (t >= 0) {
          if (this.bird.speed > 0) {
            fnly = this.bird.top + bird_height;
            min = fnly;
            spd = this.bird.speed;
            g = this.bird.gravity;
            for (i = j = 1, ref = t; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {
              fnly -= spd;
              spd += g;
            }
          } else {
            fnly = this.bird.top + bird_height - this.bird.speed;
          }
        } else {
          fnly = this.bird.top + bird_height - this.bird.speed;
        }
        if (fnly >= p.data('y1')) {
          return this.bird.jump();
        }
      }
    };

    return AI;

  })();

  Stage = (function() {
    function Stage() {
      this.$elm = jQuery('<div></div>').addClass('stage').appendTo(document.body);
      this.$ground = jQuery('<div></div>').addClass('ground').appendTo(this.$elm);
      this.bgleft = 0;
      this.move();
    }

    Stage.prototype.build_elm = function(name) {
      return jQuery('<div></div>').addClass(name).appendTo(this.$elm);
    };

    Stage.prototype.move = function() {
      return this.$elm.removeClass('stop');
    };

    Stage.prototype.stop = function() {
      return this.$elm.addClass('stop');
    };

    Stage.prototype.draw = function() {
      if (this.$elm.hasClass('stop')) {
        return;
      }
      this.bgleft -= this.runner.GROUND_SPEED;
      return this.$ground.css({
        'background-position': this.bgleft + "px 0"
      });
    };

    return Stage;

  })();

  Bird = (function() {
    function Bird() {
      this.$elm = jQuery('<div></div>').addClass('bird');
      this.speed = 0;
      this.is_dead = false;
      this.gravity = 0;
    }

    Bird.prototype.draw = function() {
      this._repos();
      return this.hit();
    };

    Bird.prototype._repos = function() {
      var new_top;
      if (this.gravity !== 0) {
        if (this.speed > 0) {
          this.$elm.addClass('up').removeClass('down');
        } else {
          this.$elm.addClass('down').removeClass('up');
        }
        new_top = this.top - this.speed;
        if (new_top >= state_ground) {
          this.pos(this.left, state_ground);
          this.speed = 0;
          return this.gravity = 0;
        } else {
          this.pos(this.left, new_top);
          return this.speed = this.speed - this.gravity;
        }
      }
    };

    Bird.prototype.pos = function(left, top) {
      this.left = left;
      this.top = top;
      if (this.top < 0) {
        this.top = 0;
      }
      return this.$elm.css({
        left: this.left,
        top: this.top
      });
    };

    Bird.prototype.hit = function() {
      var W, bird_mx, p, pipe_mx, pipes;
      if (this.is_dead) {
        return;
      }
      if (this.top >= state_ground) {
        this.state_dead();
        return;
      }
      W = (bird_width + pipes_width) / 2;
      pipes = window.game.pipes.pipes;
      if (pipes.length > 0) {
        p = pipes[0];
        bird_mx = bird_center_x;
        pipe_mx = p.data('left') + pipes_width / 2;
        if (Math.abs(bird_mx - pipe_mx) <= W) {
          if (this.top < p.data('y0') || this.top + bird_height > p.data('y1')) {
            this.state_dead();
            return console.log("hit the pipe y1:" + (p.data('y1')) + " y0:" + (p.data('y0')) + " bt " + this.top + " bb" + (this.top - bird_height));
          }
        }
      }
    };

    Bird.prototype.state_suspend = function() {
      this.$elm.removeClass('no-suspend').removeClass('down').removeClass('up');
      this.speed = 0;
      this.is_dead = false;
      this.$elm.removeClass('dead');
      return this.gravity = 0;
    };

    Bird.prototype.state_fly = function() {
      this.$elm.addClass('no-suspend');
      return this.jump();
    };

    Bird.prototype.state_dead = function() {
      this.is_dead = true;
      this.$elm.addClass('dead');
      return jQuery(document).trigger('bird:dead');
    };

    Bird.prototype.jump = function() {
      if (this.is_dead) {
        return;
      }
      this.gravity = this.runner.GRAVITY;
      return this.speed = this.runner.BIRD_JUMP_SPEED;
    };

    return Bird;

  })();

  Score = (function() {
    function Score() {
      this.$elm = jQuery('<div></div>').addClass('score');
    }

    Score.prototype.set = function(score) {
      var $n, j, len, num, ref;
      this.score = score;
      this.$elm.html('');
      ref = (score + '').split('');
      for (j = 0, len = ref.length; j < len; j++) {
        num = ref[j];
        $n = jQuery('<div></div>').addClass('number').addClass("n" + num);
        this.$elm.append($n);
      }
      return setTimeout((function(_this) {
        return function() {
          return _this.$elm.css({
            'margin-left': -_this.$elm.width() / 2
          });
        };
      })(this), 1);
    };

    Score.prototype.inc = function() {
      this.set(this.score + 1);
      return console.log("Passed");
    };

    return Score;

  })();

  ScoreBoard = (function() {
    function ScoreBoard() {
      this.$elm = jQuery('<div></div>').addClass('score_board');
      this.$score = jQuery('<div></div>').addClass('score').appendTo(this.$elm).css({
        left: 'auto',
        top: 45,
        right: 30
      });
      this.$max_score = jQuery('<div></div>').addClass('score').appendTo(this.$elm).css({
        left: 'auto',
        top: 102,
        right: 30
      });
      this.$new_record = jQuery('<div></div>').addClass('new_record').appendTo(this.$elm);
    }

    ScoreBoard.prototype.set = function(score) {
      var $n, j, l, len, len1, num, ref, ref1, results, sb;
      sb = (function() {
        switch (false) {
          case !(score < 15):
            return 'score_board_N.png';
          case !(score < 25):
            return 'score_board_C.png';
          case !(score < 40):
            return 'score_board_S.png';
          default:
            return 'score_board_G.png';
        }
      })();
      this.$elm.css({
        "background-image": "url(ui/images/" + sb + ")"
      });
      if (!localStorage.max_score) {
        localStorage.max_score = 0;
      }
      if (localStorage.max_score < score) {
        localStorage.max_score = score;
        this.$new_record.show();
      } else {
        this.$new_record.hide();
      }
      this.$score.html('');
      this.$max_score.html('');
      ref = (score + '').split('');
      for (j = 0, len = ref.length; j < len; j++) {
        num = ref[j];
        $n = jQuery('<div></div>').addClass('number').addClass("n" + num);
        this.$score.append($n);
      }
      ref1 = (localStorage.max_score + '').split('');
      results = [];
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        num = ref1[l];
        $n = jQuery('<div></div>').addClass('number').addClass("n" + num);
        results.push(this.$max_score.append($n));
      }
      return results;
    };

    return ScoreBoard;

  })();

  Pipes = (function() {
    function Pipes() {
      this.xgap = 140 + pipes_width;
      this.ygap = pipes_height;
      this.pipes = [];
      this.is_stop = true;
    }

    Pipes.prototype.generate = function() {
      var $bottom, $pipe, $top, last_pipe, left, y0, y1;
      y0 = ~~(Math.random() * (250 - 70 + 1) + 70);
      y1 = y0 + this.ygap;
      last_pipe = this.pipes[this.pipes.length - 1];
      if (last_pipe) {
        left = last_pipe.data('left') + this.xgap;
      } else {
        left = 384 * 2;
      }
      $pipe = jQuery('<div></div>').addClass('pipe').css('left', left).data('left', left).data('y0', y0).data('y1', y1);
      $top = jQuery('<div></div>').addClass('top').appendTo($pipe).css({
        height: y0
      });
      $bottom = jQuery('<div></div>').addClass('bottom').appendTo($pipe).css({
        top: y1
      });
      this.pipes.push($pipe);
      return jQuery(document).trigger('pipe:created', $pipe);
    };

    Pipes.prototype.draw = function() {
      var $pipe, j, left, len, pass_line_x, pipe0, pipe_center, ref;
      if (this.is_stop) {
        return;
      }
      ref = this.pipes;
      for (j = 0, len = ref.length; j < len; j++) {
        $pipe = ref[j];
        left = $pipe.data('left') - this.runner.GROUND_SPEED;
        $pipe.css('left', left).data('left', left);
      }
      if (this.pipes.length > 0) {
        if (this.pipes.length < 3) {
          this.generate();
        }
        pipe0 = this.pipes[0];
        if (pipe0.data('left') < -pipes_width) {
          pipe0.remove();
          this.pipes.splice(0, 1);
        }
        pipe_center = pipes_width / 2;
        pass_line_x = bird_left_x + bird_width / 2 - pipe_center;
        if (pipe0.data('left') < pass_line_x) {
          if (!pipe0.data('passed')) {
            pipe0.data('passed', true);
            return jQuery(document).trigger('score:add');
          }
        }
      }
    };

    Pipes.prototype.stop = function() {
      return this.is_stop = true;
    };

    Pipes.prototype.clear = function() {
      var j, len, p, ref;
      ref = this.pipes;
      for (j = 0, len = ref.length; j < len; j++) {
        p = ref[j];
        p.remove();
      }
      return this.pipes = [];
    };

    Pipes.prototype.start = function() {
      this.is_stop = false;
      return this.generate();
    };

    return Pipes;

  })();

  Game = (function() {
    function Game(stage) {
      this.stage = stage;
      this.stage = new Stage;
      this.bird = new Bird;
      this.score = new Score;
      this.score_board = new ScoreBoard;
      this.pipes = new Pipes;
      this.runner = new Runner;
      this.runner.add(this.bird);
      this.runner.add(this.pipes);
      this.runner.add(this.stage);
      this.runner.run();
      this._init_objects();
      this._init_events();
    }

    Game.prototype._init_objects = function() {
      this.$logo = this.stage.build_elm('logo');
      this.$start = this.stage.build_elm('start');
      this.$ok = this.stage.build_elm('ok');
      this.$get_ready = this.stage.build_elm('get_ready');
      this.$tap = this.stage.build_elm('tap');
      this.$game_over = this.stage.build_elm('game_over');
      this.$score_board = this.score_board.$elm.appendTo(this.stage.$elm);
      this.$bird = this.bird.$elm.appendTo(this.stage.$elm);
      this.$score = this.score.$elm.appendTo(this.stage.$elm);
      return this.objects = {
        'logo': this.$logo,
        'start': this.$start,
        'ok': this.$ok,
        'get_ready': this.$get_ready,
        'game_over': this.$game_over,
        'tap': this.$tap,
        'score': this.$score,
        'score_board': this.$score_board,
        'bird': this.$bird
      };
    };

    Game.prototype._fly = function() {
      if (this.state === 'ready') {
        this.fly();
        return;
      }
      if (this.state === 'fly') {
        return this.bird.jump();
      }
    };

    Game.prototype._init_events = function() {
      this.$start.on('click', (function(_this) {
        return function() {
          return _this.stage.$elm.fadeOut(200, function() {
            _this.ready();
            return _this.stage.$elm.fadeIn(200);
          });
        };
      })(this));
      this.$ok.on('click', (function(_this) {
        return function() {
          return _this.stage.$elm.fadeOut(200, function() {
            _this.begin();
            return _this.stage.$elm.fadeIn(200);
          });
        };
      })(this));
      this.stage.$elm.on('mousedown', (function(_this) {
        return function() {
          return _this._fly();
        };
      })(this));
      jQuery(document).on('bird:dead', (function(_this) {
        return function() {
          return _this.over();
        };
      })(this));
      jQuery(document).on('bird:hit', (function(_this) {
        return function() {
          return _this.bird.state_dead();
        };
      })(this));
      jQuery(document).on('pipe:created', (function(_this) {
        return function(evt, $pipe) {
          return _this.stage.$elm.append($pipe);
        };
      })(this));
      return jQuery(document).on('score:add', (function(_this) {
        return function(evt, $pipe) {
          _this.score.inc();
          if (_this.score.score % 20 === 0) {
            return _this.runner.FRAME_TIME *= 0.80;
          }
        };
      })(this));
    };

    Game.prototype._show = function() {
      var j, k, len, name, o, ref, results, v;
      ref = this.objects;
      for (k in ref) {
        v = ref[k];
        v.hide();
      }
      results = [];
      for (j = 0, len = arguments.length; j < len; j++) {
        name = arguments[j];
        o = this.objects[name];
        if (o) {
          results.push(o.show());
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    Game.prototype.begin = function() {
      this.state = 'begin';
      this._show('logo', 'bird', 'start');
      this.bird.pos(310, 145);
      this.stage.move();
      this.bird.state_suspend();
      this.runner.set_speed();
      return this.pipes.clear();
    };

    Game.prototype.ready = function() {
      this.state = 'ready';
      this._show('bird', 'tap', 'score');
      this.$get_ready.fadeIn(400);
      this.bird.pos(bird_left_x, 237);
      this.bird.state_suspend();
      return this.score.set(0);
    };

    Game.prototype.fly = function() {
      this.state = 'fly';
      this._show('get_ready', 'bird', 'tap', 'score');
      this.$get_ready.fadeOut(400);
      this.$tap.fadeOut(400);
      this.bird.state_fly();
      this.pipes.start();
      return this.ai = new AI;
    };

    Game.prototype.over = function() {
      this.state = 'over';
      this._show('bird', 'score');
      this.stage.stop();
      this.pipes.stop();
      this.stage.$elm.shake(6, 3, 100);
      return setTimeout((function(_this) {
        return function() {
          _this.$score.fadeOut();
          return _this.$game_over.fadeIn(function() {
            _this.score_board.set(_this.score.score);
            return _this.$score_board.show().css({
              top: 512
            }).delay(300).animate({
              top: 179
            }, function() {
              return _this.$ok.fadeIn();
            });
          });
        };
      })(this), 500);
    };

    return Game;

  })();

  jQuery(function() {
    window.game = new Game;
    return window.game.begin();
  });

}).call(this);

//# sourceMappingURL=bird.js.js.map
